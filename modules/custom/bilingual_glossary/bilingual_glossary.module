<?php
// $Id$

/**
 * @file
 * This is a Drupal Module - Bilingual Glossary
 * It implements the Bilingual Glossary field for CCK
 */

/**
 * Implementation of hook_init().
 *
 * Makes sure the right files have been loaded.
 */
/**
 * function bilingual_glossary_init() {
  module_load_include('inc', 'bilingual_glossary', 'bilingual_glossary_widget');
  module_load_include('inc', 'bilingual_glossary', 'bilingual_glossary_field');
}
 */


/* --------- Field information ----------- */

/**
 * Implementation of CCK's hook_field_info().
 *
 * Returns basic information about this CCK field.
 */ 
function bilingual_glossary_field_info() {
  return array(
    'bilingual_glossary_term' => array(
      'label' => t('Bilingual glossary term'),
      'description' => t('Stores a bilingual glossary term'),
    )
  );
}

/** Implementation of CCK's hook_field_settings().
 *
 * Defines database storage for this field, and field settings forms.
 *
 * Other functions called are in the 
 * bilingual_glossary_field.inc include file.
 */
function bilingual_glossary_field_settings( $op, $field ) {
  switch ($op) {

    case 'save':
      return array('term', 'phonetics', 'link', 'definition');

    case 'database columns':
      $columns = array(
        'term' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => "''", 'sortable' => TRUE),
        'phonetics' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => "''", 'sortable' => TRUE),
        'link' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => "''", 'sortable' => FALSE),
        'definition' => array('type' => 'text', 'not null' => TRUE, 'default' => "''", 'sortable' => FALSE),
      );
      return $columns;

    case 'filters':
      return array(
        'default' => array(
          'list' => '_bilingual_glossary_term_filter_handler',
          'list-type' => 'list',
          'operator' => 'views_handler_operator_or',
          'value-type' => 'array',
          'extra' => array('field' => $field),
        ),
      );
  }
}

/* --------- Widget information ----------- */

/**
 * Implementation of CCK's hook_widget_info().
 *
 * Returns basic information about the widget.
 */
 
function bilingual_glossary_widget_info() {
  return array(
    'bilingual_glossary_widget' => array(
      'label' => 'Bilingual glossary term',
      'field types' => array('bilingual_glossary'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array('default value' => CONTENT_CALLBACK_CUSTOM),
    ),
  );
}

function bilingual_glossary_widget($op, &$node, $field, &$items) {
  switch ($op) {

    case 'form':
      $form = array();
      $form[$field['field_name']] = array('#tree' => TRUE);

      if ($field['multiple']) {
        $form[$field['field_name']]['#type'] = 'fieldset';
        $form[$field['field_name']]['#description'] = t('Bilingual glossary terms');
        $delta = 0;
        foreach (range($delta, $delta + 2) as $delta) {
          $item = $items[$delta];
          $form[$field['field_name']][$delta]['#type'] = 'fieldset';
          $form[$field['field_name']][$delta]['term'] = array(
            '#type' => 'textfield',
            '#title' => t('Term'),
            '#default_value' => $items[$delta]['term'],
            '#required' => ($delta == 0) ? $field['required'] : FALSE,
          );
          $form[$field['field_name']][$delta]['phonetics'] = array(
            '#type' => 'textfield',
            '#title' => t('Phonetics'),
            '#default_value' => $items[$delta]['phonetics'],
            '#required' => ($delta == 0) ? $field['required'] : FALSE,
          );
          $form[$field['field_name']][$delta]['link'] = array(
            '#type' => 'textfield',
            '#title' => t('Link'),
            '#default_value' => $items[$delta]['link'],
            '#required' => ($delta == 0) ? $field['required'] : FALSE,
          );
          $form[$field['field_name']][$delta]['definition'] = array(
            '#type' => 'textarea',
            '#title' => t('Definition'),
            '#default_value' => $items[$delta]['definition'],
            '#required' => ($delta == 0) ? $field['required'] : FALSE,
          );
        }
      }
      else {
          $form[$field['field_name']][0]['#type'] = 'fieldset';
          $form[$field['field_name']][0]['term'] = array(
            '#type' => 'textfield',
            '#title' => t('Term'),
            '#default_value' => $items[0]['programme'],
            '#required' => $field['required'],
          );
          $form[$field['field_name']][0]['phonetics'] = array(
            '#type' => 'textfield',
            '#title' => t('Phonetics'),
            '#default_value' => $items[0]['phonetics'],
            '#required' => $field['required'],
          );
          $form[$field['field_name']][0]['link'] = array(
            '#type' => 'textfield',
            '#title' => t('Link'),
            '#default_value' => $items[0]['link'],
            '#required' => $field['required'],
          );
          $form[$field['field_name']][0]['definition'] = array(
            '#type' => 'textarea',
            '#title' => t('Definition'),
            '#default_value' => $items[0]['definition'],
            '#required' => $field['required'],
          );
      }
      return $form;

    case 'process form values':
  }
}

function bilingual_glossary_field_formatter($field, $item, $formatter, $node) {
	$text = '';
	$text = $item['term'];
	if (strlen($item['phonetics'])) {
	  $text .= ' [' . $item['phonetics'] . ']';
	}
	$text .= $item['definition'];
	if (strlen($item['link'])) {
	  $text .= ' <a href="' . $item['link'] . '">link</a>';
	}
	return $text;
}